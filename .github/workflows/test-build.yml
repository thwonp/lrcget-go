name: Test Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Add Go bin to PATH (Windows)
        if: runner.os == 'Windows'
        run: |
          pwsh -Command '"$env:USERPROFILE\\go\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append'

      - name: Add Go bin to PATH (non-Windows)
        if: runner.os != 'Windows'
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install system dependencies (Ubuntu/Linux)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y software-properties-common ca-certificates apt-transport-https || true
          sudo add-apt-repository universe || true
          sudo apt-get update

          pkgs=(pkg-config libgtk-3-dev libgirepository1.0-dev libcairo2-dev libjson-glib-dev libatk1.0-dev libpango1.0-dev gcc g++)

          for candidate in libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libwebkit2gtk-dev; do
            if apt-cache show "$candidate" >/dev/null 2>&1; then
              pkgs+=("$candidate")
              echo "Installing detected webkit package: $candidate"
              break
            fi
          done

          echo "Installing packages: ${pkgs[*]}"
          sudo apt-get install -y "${pkgs[@]}"
          sudo apt-get clean

          PKGDIRS=(/usr/lib/x86_64-linux-gnu/pkgconfig /usr/lib/pkgconfig /usr/share/pkgconfig /usr/local/lib/pkgconfig)
          for d in "${PKGDIRS[@]}"; do
            if [ -d "$d" ]; then
              if [ -f "$d/webkit2gtk-4.0.pc" ]; then
                echo "webkit2gtk-4.0.pc already present in $d"
                break
              fi
              if [ -f "$d/webkit2gtk-4.1.pc" ]; then
                echo "Creating symlink $d/webkit2gtk-4.0.pc -> $d/webkit2gtk-4.1.pc"
                sudo ln -s "$d/webkit2gtk-4.1.pc" "$d/webkit2gtk-4.0.pc"
                break
              fi
              shopt -s nullglob
              for f in "$d"/webkit2gtk-*.pc; do
                echo "Creating symlink $d/webkit2gtk-4.0.pc -> $f"
                sudo ln -s "$f" "$d/webkit2gtk-4.0.pc" || true
                break 2
              done
              shopt -u nullglob
            fi
          done
      - name: Test build for current platform
        run: |
          wails build -clean
          if [ "${{ runner.os }}" = "Windows" ]; then
            pwsh -Command "Get-ChildItem -LiteralPath 'build/bin' -Force | Select-Object Name,Length,Mode,LastWriteTime"
          else
            ls -la build/bin/
          fi

      - name: Test cross-platform builds
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            pwsh -Command "New-Item -ItemType Directory -Force -Path 'test-builds' | Out-Null"
            pwsh -Command "& wails build -platform 'linux/amd64' -clean -o 'test-builds/lrcget-linux-amd64'"
            pwsh -Command "& wails build -platform 'windows/amd64' -clean -o 'test-builds/lrcget-windows-amd64.exe'"
          else
            mkdir -p test-builds
            wails build -platform linux/amd64 -clean -o test-builds/lrcget-linux-amd64
            wails build -platform windows/amd64 -clean -o test-builds/lrcget-windows-amd64.exe
          fi
          if [ "${{ runner.os }}" = "Windows" ]; then
            pwsh -Command "Get-ChildItem -LiteralPath 'test-builds' -Force | Select-Object Name,Length,Mode,LastWriteTime"
            pwsh -Command "Get-ChildItem -LiteralPath 'test-builds' | ForEach-Object { $_.FullName }"
          else
            ls -la test-builds/
            file test-builds/*
          fi
